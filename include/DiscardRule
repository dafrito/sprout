#ifndef SPROUT_DISCARDRULE_HEADER
#define SPROUT_DISCARDRULE_HEADER

#include <vector>
#include <algorithm>

#include "RuleTraits"
#include "SequenceRule"
#include "Cursor"
#include "Result"

namespace sprout {

/**
 * Runs the specified rule, but discards any matches. The cursor will be
 * moved on successful matches, so this is useful for skipping unnecessary
 * content like whitespace.
 */
template <class Rule>
class DiscardRule : public RuleTraits<Rule>
{
    typedef typename Rule::token_type Token;
    typedef typename Rule::input_type Input;

    const Rule _rule;

public:
    DiscardRule(const Rule& rule) :
        _rule(rule)
    {
    }

    const Result<Token> _eof;
    const Result<Token>& end() const
    {
        return _eof;
    }

    const Result<Token> parse(Cursor<Input>& iter) const
    {
        _rule.parse(iter);
        return end();
    }
};

template <class Rule, class Subrule>
struct SequenceInserter<Rule, DiscardRule<Subrule>>
{
    static void insert(SequenceRule<Rule>& sequence, const DiscardRule<Subrule>& rule)
    {
        bool requiredFlag = sequence.insertAsRequired();
        sequence << Optional;
        sequence.insert(rule);
        sequence << (requiredFlag ? Required : Optional);
    }
};

template <class Rule>
DiscardRule<Rule> makeDiscard(const Rule& rule)
{
    return DiscardRule<Rule>(rule);
}

} // namespace sprout

#endif // SPROUT_DISCARDRULE_HEADER

// vim: set ft=cpp ts=4 sw=4 :
