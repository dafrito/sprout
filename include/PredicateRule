#ifndef SPROUT_PREDICATERULE_HEADER
#define SPROUT_PREDICATERULE_HEADER

#include "Cursor"
#include "Result"

namespace sprout {

template <class Input, class Token, class Matcher>
class PredicateRule
{
public:
    typedef Input input_type;
    typedef Token token_type;

private:
    const Matcher _matcher;

public:
    PredicateRule(const Matcher& matcher) :
        _matcher(matcher)
    {
    }

    const Result<Token> _eof;
    const Result<Token>& end() const
    {
        return _eof;
    }

    const Result<Token> parse(Cursor<Input>& orig) const
    {
        auto iter = orig;

        Token aggregate;
        auto candidate = *iter++;
        if (!_matcher(aggregate, candidate)) {
            return end();
        }

        orig = iter;
        return Result<Token>({ aggregate });
    }
};

template <class Input, class Token, class Tester>
class SimplePredicate
{
    const Tester tester;

public:
    SimplePredicate(const Tester& tester) :
        tester(tester)
    {
    }

    bool operator()(Token& aggregate, const Input& input) const
    {
        if (!tester(input)) {
            return false;
        }
        aggregate = input;
        return true;
    }
};

template <class Input, class Token, class Matcher>
PredicateRule<Input, Token, Matcher> makePredicate(const Matcher& matcher)
{
    return PredicateRule<Input, Token, Matcher>(matcher);
}

template <class Input, class Token, class Tester>
PredicateRule<Input, Token, SimplePredicate<Input, Token, Tester>> makeSimplePredicate(const Tester& tester)
{
    SimplePredicate<Input, Token, Tester> matcher(tester);
    PredicateRule<Input, Token, decltype(matcher)> rule(matcher);
    return rule;
}

} // namespace sprout

#endif // SPROUT_PREDICATERULE_HEADER

// vim: set ft=cpp ts=4 sw=4 :
