#ifndef SPROUT_MULTIPLERULE_HEADER
#define SPROUT_MULTIPLERULE_HEADER

#include "RuleTraits"
#include "Cursor"
#include "Result"

namespace sprout {

/**
 * MultipleRule matches as many instances of a specified rule
 * as possible, aggregating all results into a single result.
 */
template <class Rule>
class MultipleRule : public RuleTraits<Rule>
{
    typedef typename Rule::token_type Token;
    typedef typename Rule::input_type Input;

    Rule rule;

public:
    MultipleRule(const Rule& rule) :
        rule(rule)
    {
    }

    const Result<Token> _eof;
    const Result<Token>& end() const
    {
        return _eof;
    }

    const Result<Token> parse(Cursor<Input>& iter) const
    {
        Result<Token> aggregate;
        while (true) {
            auto tokens = rule.parse(iter);
            if (tokens == rule.end()) {
                break;
            }
            aggregate.insert(tokens, rule.end());
        }
        return aggregate;
    }
};

template <class Rule>
MultipleRule<Rule> makeMultiple(const Rule& rule)
{
    return MultipleRule<Rule>(rule);
}

} // namespace sprout

#endif // SPROUT_MULTIPLERULE_HEADER

// vim: set ft=cpp ts=4 sw=4 :
