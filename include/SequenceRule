#ifndef SPROUT_SEQUENCERULE_HEADER
#define SPROUT_SEQUENCERULE_HEADER

#include <vector>

#include "composite.hpp"
#include "RuleTraits"
#include "Cursor"
#include "Result"

namespace sprout {

/**
 * SequenceRule matches input against an ordered list of subrules.
 * All required subrules to match for SequenceRule to match.
 */
template <class Rule>
class SequenceRule : public RuleTraits<Rule>
{
    typedef typename Rule::token_type Token;
    typedef typename Rule::input_type Input;

    std::vector<Rule> _rules;

public:
    template <class Container>
    SequenceRule(const Container& rules)
    {
        for (auto rule : rules) {
            *this << rule;
        }
    }

    SequenceRule()
    {
    }

    template <class T>
    SequenceRule& operator<<(const T& rule)
    {
        _rules.push_back(rule);
        return *this;
    }

    bool operator()(Cursor<Input>& iter, Result<Token>& result) const
    {
        Result<Token> aggregate;
        for (auto rule : _rules) {
            if (!rule(iter, aggregate)) {
                return false;
            }
        }
        result.insert(aggregate);
        return true;
    }
};

namespace make {

template <class Rule, typename... Values>
SequenceRule<Rule> sequence(const Rule& rule, Values... rest)
{
    SequenceRule<Rule> sequence;
    populate(sequence, rule, rest...);
    return sequence;
}

template <class Rule>
SequenceRule<Rule> sequence()
{
    return SequenceRule<Rule>();
}

} // namespace make

} // namespace sprout

#endif // SPROUT_SEQUENCERULE_HEADER

// vim: set ft=cpp ts=4 sw=4 :
