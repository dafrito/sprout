#ifndef SPROUT_CURSOR_HEADER
#define SPROUT_CURSOR_HEADER

#include <cassert>
#include <sstream>
#include <memory>
#include <cstring>

#include "StreamIterator"

namespace sprout {

template <class Data>
class CursorData
{
    std::vector<Data> _buffer;
    int _head;

protected:
    virtual Data next()=0;

public:
    CursorData() :
        _head(0)
    {
    }

    virtual bool atEnd()=0;

    int head() const
    {
        return _head;
    }

    int tail() const
    {
        return head() - buffered();
    }

    int buffered() const
    {
        return _buffer.size();
    }

    bool hasTokens()
    {
        return !atEnd();
    }

    std::string state() const
    {
        std::stringstream str;
        str << "[tail: " << tail() << ", head: " << head() << "]";
        return str.str();
    }

    Data& get(int pos)
    {
        if (pos < 0) {
            std::stringstream str;
            str << "pos must be non-negative, but I was given " << pos << ". " << state();
            throw std::range_error(str.str());
        }
        if (pos < tail()) {
            std::stringstream str;
            str << "pos must not refer to discarded elements, but I was given " << pos << ". " << state();
            throw std::range_error(str.str());
        }
        advanceTo(pos);
        return _buffer.at(pos);
    }

    void advance()
    {
        if (atEnd()) {
            return;
        }
        _buffer.push_back(next());
        ++_head;
    }

    void advanceTo(int pos)
    {
        while (head() <= pos) {
            if (atEnd()) {
                return;
            }
            advance();
        }
    }

    void discard(int amount)
    {
        _buffer.erase(_buffer.start(), _buffer.start() + amount);
    }

    void discard()
    {
        discard(buffered());
    }
};

template <class Data, class Iterator>
class CursorDataImpl : public CursorData<Data>
{
    Iterator _iter;
    Iterator _end;

protected:
    Data next()
    {
        // Don't use post-increment for iterators that don't support copying
        Data value = *_iter;
        ++_iter;
        return value;
    }

public:
    CursorDataImpl(Iterator begin, Iterator end) :
        _iter(begin),
        _end(end)
    {
    }

    bool atEnd()
    {
        return _iter == _end;
    }
};

template <class Data>
class Cursor
{
public:
    typedef Data value_type;
private:

    std::shared_ptr<CursorData<Data>> _data;
    int _pos;

public:
    Cursor(const Cursor<Data>& other) :
        _data(other._data),
        _pos(other._pos)
    {
    }

    template <class Iterator>
    Cursor(Iterator begin) :
        Cursor(begin, Iterator())
    {
    }

    template <class Iterator>
    Cursor(Iterator begin, Iterator end) :
        _data(new CursorDataImpl<Data, Iterator>(begin, end)),
        _pos(0)
    {
    }

    int pos() const
    {
        return _pos;
    }

    Data& get()
    {
        return _data->get(pos());
    }

    Data operator*()
    {
        return get();
    }

    Data* operator->()
    {
        return &get();
    }

    operator bool() const
    {
        return !_data->atEnd() || pos() < _data->head();
    }

    Cursor& operator++()
    {
        _data->advanceTo(++_pos);
        return *this;
    }

    Cursor operator++(int)
    {
        Cursor tmp(*this);
        ++(*this);
        return tmp;
    }

    Cursor& operator+=(const int delta)
    {
        _data->advanceTo(_pos += delta);
        return *this;
    }

    Cursor& operator-=(const int delta)
    {
        return *this += -delta;
    }

    Cursor operator+(const int delta) const
    {
        Cursor tmp(*this);
        tmp += delta;
        return tmp;
    }

    Cursor operator-(const int delta) const
    {
        Cursor tmp(*this);
        tmp -= delta;
        return tmp;
    }

    bool operator<(const Cursor& other) const
    {
        return _data == other._data && pos() < other.pos();
    }

    bool operator>(const Cursor& other) const
    {
        return _data == other._data && pos() > other.pos();
    }

    bool operator<=(const Cursor& other) const
    {
        return _data == other._data && pos() <= other.pos();
    }

    bool operator>=(const Cursor& other) const
    {
        return _data == other._data && pos() >= other.pos();
    }

    bool operator==(const Cursor& other) const
    {
        return _data == other._data && pos() == other.pos();
    }

    bool operator!=(const Cursor& other) const
    {
        return !(*this == other);
    }
};

template <class Data, class Stream>
Cursor<Data>
makeCursor(Stream* stream)
{
    return Cursor<Data>(
        StreamIterator<Data, Stream>(stream)
    );
}

template <class Data>
Cursor<Data> makeCursor(const std::string* stream)
{
    return Cursor<Data>(stream->begin(), stream->end());
}

template <class Data>
Cursor<Data> makeCursor(std::string* stream)
{
    return makeCursor<Data>(
        stream->begin(),
        stream->end()
    );
}

template <class Data>
Cursor<Data> makeCursor(const char* stream)
{
    return Cursor<Data>(stream, stream += strlen(stream));
}

template <class Data>
Cursor<Data> makeCursor(char* stream)
{
    return Cursor<Data>(stream, stream += strlen(stream));
}

#ifdef HAVE_QT_CORE

template <class Data>
Cursor<Data> makeCursor(const QString* stream)
{
    return Cursor<Data>(stream->begin(), stream->end());
}

template <class Data>
Cursor<Data> makeCursor(QString* stream)
{
    return Cursor<Data>(stream->begin(), stream->end());
}

#endif

} // namespace sprout

#endif // SPROUT_CURSOR_HEADER

// vim: set ft=cpp ts=4 sw=4 :
