#ifndef SPROUT_ALTERNATIVERULE_HEADER
#define SPROUT_ALTERNATIVERULE_HEADER

#include <vector>
#include <algorithm>

#include "RuleTraits"
#include "Cursor"
#include "Result"

namespace sprout {

/**
 * AlternativeRule matches input against an ordered list of
 * candidate rules. The first rule that matches will provide
 * AlternativeRule's result.
 */
template <class Rule>
class AlternativeRule : public RuleTraits<Rule>
{
    typedef typename Rule::token_type Token;
    typedef typename Rule::input_type Input;

    std::vector<Rule> _rules;

public:
    template <class Container>
    AlternativeRule(const Container& rules) :
        _rules(rules)
    {
    }

    const Result<Token> _eof;
    const Result<Token>& end() const
    {
        return _eof;
    }

    const Result<Token> parse(Cursor<Input>& iter) const
    {
        for (auto rule : _rules) {
            auto tokens = rule.parse(iter);
            if (tokens == rule.end()) {
                continue;
            }
            std::vector<Token> aggregate;
            std::copy(tokens, rule.end(), std::back_inserter(aggregate));
            return Result<Token>(aggregate);
        }
        return end();
    }
};

template <class Rule>
AlternativeRule<Rule> makeAlternate(std::vector<Rule>& rules)
{
    return AlternativeRule<Rule>(rules);
}

template <class Rule>
AlternativeRule<Rule> doMakeAlternate(std::vector<Rule>& rules)
{
    return makeAlternate(rules);
}

template <class Rule, typename... Rules>
AlternativeRule<Rule> doMakeAlternate(std::vector<Rule>& rules, const Rule& rule, Rules... rest)
{
    rules.push_back(rule);
    return doMakeAlternate(rules, rest...);
}

template <class Rule, typename... Rules>
AlternativeRule<Rule> makeAlternate(const Rule& rule, Rules... rest)
{
    std::vector<Rule> rules;
    return doMakeAlternate(rules, rule, rest...);
}

} // namespace sprout

#endif // SPROUT_ALTERNATIVERULE_HEADER

// vim: set ft=cpp ts=4 sw=4 :
