#ifndef SPROUT_ALTERNATIVERULE_HEADER
#define SPROUT_ALTERNATIVERULE_HEADER

#include <vector>

#include "composite.hpp"
#include "RuleTraits"
#include "Cursor"
#include "Result"

namespace sprout {

/**
 * AlternativeRule matches input against an ordered list of
 * candidate rules. The first rule that matches will provide
 * AlternativeRule's result.
 */
template <
    class Rule,
    class Input = typename Rule::input_type,
    class Token = typename Rule::token_type
>
class AlternativeRule
{
    std::vector<Rule> _rules;

public:
    typedef Input input_type;
    typedef Token token_type;

    AlternativeRule()
    {
    }

    template <class Container>
    AlternativeRule(const Container& rules) :
        _rules(rules)
    {
    }

    template <class T>
    AlternativeRule& operator<<(const T& rule)
    {
        _rules.push_back(rule);
        return *this;
    }

    bool operator()(Cursor<Input>& iter, Result<Token>& result) const
    {
        for (auto rule : _rules) {
            if (rule(iter, result)) {
                return true;
            }
        }
        return false;
    }
};

namespace make {

template <class Rule, typename... Rules>
AlternativeRule<Rule> alternate(const Rule& rule, Rules... rest)
{
    AlternativeRule<Rule> alternative;
    populate(alternative, rule, rest...);
    return alternative;
}

template <class Input, class Token, class Rule, typename... Rules>
AlternativeRule<Rule, Input, Token> alternate(const Rule& rule, Rules... rest)
{
    AlternativeRule<Rule, Input, Token> alternative;
    populate(alternative, rule, rest...);
    return alternative;
}

} // namespace make

} // namespace sprout

#endif // SPROUT_ALTERNATIVERULE_HEADER

// vim: set ft=cpp ts=4 sw=4 :
